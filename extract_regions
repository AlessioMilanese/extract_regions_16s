#!/usr/bin/env python

from __future__ import division
import os
import errno
import sys
import argparse
import shlex
import shutil
import time
import subprocess
import glob
import multiprocessing
import tempfile


# position of the script -------------------------------------------------------
path_DB = os.path.realpath(__file__)
path_array = path_DB.split("/")
relative_path = "/".join(path_array[0:-1])
relative_path = relative_path + "/"

# ------------------------------------------------------------------------------
#       print the help informations
# ------------------------------------------------------------------------------
class CapitalisedHelpFormatter(argparse.HelpFormatter):
    def add_usage(self, usage, actions, groups, prefix=None):
        if prefix is None:
            prefix = ''
        return super(CapitalisedHelpFormatter, self).add_usage(usage, actions, groups, prefix)


def msg(name=None):
    str_msg = '''
\00
Program: extract_regions - a tool to extract variable regions from 16S gene sequences

Usage: extract_regions [-i/-a] <file> [options]

Input option:
  -i  FILE    fasta file containing the 16S sequences
  -a  FILE    provide the alignment generated by -A [None]
  -f  STR     instead of extracting a region, specify forward primer [None]
  -r  STR     instead of extracting a region, specify reverse primer [None]

Output option:
  -o  FILE    output file name [stdout]
  -A  FILE    save the intermediate alignment [None]

Algorithm options:
  -t  INT     number of threads [1]
  -v  INT     verbose level: 1=error, 2=warning, 3=message, 4+=debugging [3]

Possible forward primers: 8F, 27F, 341F, 515F, 519F, 1237F
Possible reverse primers: 338R, 519R, 785R, 806R, 907R, 926R, 1100R, 1391R
        '''
    return str_msg

# ------------------------------------------------------------------------------
# function to check if a specific tool exists
def is_tool(name):
    try:
        devnull = open(os.devnull)
        subprocess.Popen([name], stdout=devnull, stderr=devnull).communicate()
    except OSError as e:
        if e.errno == errno.ENOENT:
            return False
    return True


# ------------------------------------------------------------------------------
# MAIN
# ------------------------------------------------------------------------------
def main(argv=None):

    devnull = open(os.devnull)

    parser = argparse.ArgumentParser(usage=msg(), formatter_class=CapitalisedHelpFormatter,add_help=False)
    parser.add_argument('-v', action='store', type=int, default=None, dest='verbose', help='Verbose levels')
    parser.add_argument('-t', type=int, action="store", dest='threads', default=None, help='Number of threads to be used.')
    parser.add_argument('-o', action="store", dest='output', default=None, help='name of output file')
    parser.add_argument('-A', action="store", dest='output_alignment', default=None, help='save alignment')
    parser.add_argument('-r', action="store", default=None,dest='reversePrimer', help='which reverse primer to use',choices=['338R', '519R', '785R', '806R', '907R', '926R', '1100R', '1391R'])
    parser.add_argument('-f', action="store", default=None,dest='forPrimer', help='which forward primer to use',choices=['8F', '27F', '341F', '515F', '519F', '1237F'])
    parser.add_argument('-i', action="store", default=None,dest='fasta_input', help='fasta input')
    parser.add_argument('-a', action="store", default=None,dest='al_input', help='alignment input')
    args = parser.parse_args()

    # set default for args.verbose
    if (args.verbose is None): args.verbose = 3

    # set the default
    if (args.output is None): args.output = ""
    if (args.threads is None): args.threads = 1
    if (args.output_alignment is None): args.output_alignment = ""
    if (args.reversePrimer is None): args.reversePrimer = ""
    if (args.forPrimer is None): args.forPrimer = ""
    if (args.fasta_input is None): args.fasta_input = ""
    if (args.al_input is None): args.al_input = ""

    return 0        # success



#-------------------------------- run main -------------------------------------
if __name__ == '__main__':
    status = main()
    sys.exit(status)
